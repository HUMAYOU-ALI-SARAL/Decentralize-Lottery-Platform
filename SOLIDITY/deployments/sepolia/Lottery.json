{
  "address": "0xD332c38d29dD020b021e50bbBf913E441892689f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entryFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "setInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LowAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentbalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "players",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lotteryState",
          "type": "uint256"
        }
      ],
      "name": "lotteryUpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "tranferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "participantEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "requestLotteryWinner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upKeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntered",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_recentWinner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb940c9c4de1699206ce87806d39d90fe5791116cf77e13ecf704c8b30532595c",
  "receipt": {
    "to": null,
    "from": "0x966C117989EFE1d11Ba1A39d31C215fa851878E7",
    "contractAddress": "0xD332c38d29dD020b021e50bbBf913E441892689f",
    "transactionIndex": 23,
    "gasUsed": "1202582",
    "logsBloom": "0x
    "blockHash": "0xd00adc5ea3497bb709e0b7b838b37815a3f8d49d90a08ab966246de72e2c90b1",
    "transactionHash": "0xb940c9c4de1699206ce87806d39d90fe5791116cf77e13ecf704c8b30532595c",
    "logs": [],
    "blockNumber": 4461672,
    "cumulativeGasUsed": "5509239",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000",
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "5888",
    300,
    "30"
  ],
  "numDeployments": 2,
  "solcInputHash": "72c794033b004ef32e84b5e7d95e6582",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entryFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"setInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LowAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentbalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"players\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryState\",\"type\":\"uint256\"}],\"name\":\"lotteryUpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"tranferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"requestLotteryWinner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upKeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntered\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_recentWinner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.18;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\n\\n\\nerror LowAmount();\\nerror tranferFailed();\\nerror invalidTimeInterval();\\nerror  insufficientPlayers();\\nerror insufficientFunds();\\nerror lotteryUpkeepNotNeeded(uint currentbalance,uint players,uint lotteryState);\\ncontract Lottery is VRFConsumerBaseV2,AutomationCompatibleInterface{\\n   //events\\n   //    participant entered\\n   event participantEntered(address indexed);\\n   event requestLotteryWinner(uint indexed requestId);\\n   event WinnerPicked(address);\\n    // State Variables\\n    uint private immutable i_entryFee;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subcriptionId;\\n    uint16 requestConfirmations = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private NUM_Words=1;\\n    address payable[] private players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinatorInterface;\\n    uint private lastTimeStamp;\\n    // Lottery Variables\\n    address payable public s_recentWinner;\\n\\n\\n    // @forChainlinkKeepers\\n    uint private s_setInterval;\\n\\n\\n    // LotteryState\\n    enum LotteryState{\\n        Open,\\n        Pending,\\n        Close\\n    }\\n   LotteryState private stateLottery;\\n    constructor(uint _entryFee,address vrfCoordinator,bytes32 gasLane,uint64 subscriptionId,uint32 callbackGasLimit,uint setInterval) VRFConsumerBaseV2(vrfCoordinator){\\n        i_entryFee=_entryFee;\\n        i_vrfCoordinatorInterface=VRFCoordinatorV2Interface(vrfCoordinator);\\n        i_gasLane=gasLane;\\n        i_callbackGasLimit=callbackGasLimit;\\n        i_subcriptionId=subscriptionId;\\n        s_setInterval=setInterval;\\n        stateLottery=LotteryState(0);\\n    }\\n    \\n    function performUpkeep(bytes memory /*performdata*/)external override{\\n        (bool upkeepNeeded,)=checkUpkeep(\\\"\\\");\\n        if(!upkeepNeeded){\\n            revert lotteryUpkeepNotNeeded(address(this).balance,players.length,uint(stateLottery));\\n        }\\n       uint requestId= i_vrfCoordinatorInterface.requestRandomWords(\\n        i_gasLane,\\n        i_subcriptionId,\\n        requestConfirmations,\\n        i_callbackGasLimit,\\n        NUM_Words\\n       );\\n       emit requestLotteryWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n    uint256,\\n    uint[] memory randomWords\\n    )internal override{\\n      uint256 indexOfwinner=randomWords[0]% players.length;\\n      address payable recentWinner=players[indexOfwinner];\\n      s_recentWinner=recentWinner;\\n      stateLottery=LotteryState.Open;\\n      players=new address payable[](0);\\n      s_setInterval=block.timestamp; \\n      (bool success,)=recentWinner.call{value:address(this).balance}(\\\"\\\");\\n      if(!success){\\n       revert tranferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n\\n    }\\n\\n    function getEntered()public payable{\\n        if(msg.value<i_entryFee){\\n            revert LowAmount();\\n            }\\n        players.push(payable(msg.sender));\\n        emit participantEntered(msg.sender);\\n    }\\n\\n    function getRecentWinner()public view returns(address){\\n        return s_recentWinner;\\n    }\\n\\n\\n    function getEntryFee()public view returns(uint){\\n        return i_entryFee;\\n    }\\n\\n\\n    function getPlayer(uint index)public view returns(address){\\n        return players[index];\\n    }\\n\\n\\n//   for performing tasks on chain keepers\\n     function checkUpkeep(bytes memory)\\n     public\\n     view \\n     override\\n     returns(bool upKeepNeeded,bytes memory  /*performData*/){\\n       bool isOpen=(LotteryState.Open==stateLottery);\\n       bool timePassed=((block.timestamp-lastTimeStamp)>s_setInterval);\\n       bool hasPlayers=(players.length>0);\\n       bool hasBalance=address(this).balance>0;\\n       upKeepNeeded=(isOpen && timePassed && hasBalance && hasPlayers);\\n     }\\n \\n\\n     function getLotteryState()public view returns(LotteryState){\\n        return stateLottery;\\n     }\\n\\n\\n     function getNumWords()public view returns(uint){\\n        return NUM_Words;\\n     }\\n    \\n    function getNumberOfPlayer()public view returns(uint){\\n        return players.length;\\n    }\\n    \\n    function getCurrentInterval()public view returns(uint){\\n        return s_setInterval;\\n    }\\n    function getRequestConfirmation()public view returns(uint){\\n        return requestConfirmations;\\n    }\\n\\n\\n}\",\"keccak256\":\"0xf709a66fe750eac36a7f497787c0817b30cb8138971b24dbe8934c6072dc3af4\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x61014060405260036000806101000a81548161ffff021916908361ffff1602179055506001600060026101000a81548163ffffffff021916908363ffffffff1602179055503480156200005157600080fd5b50604051620017c5380380620017c58339818101604052810190620000779190620002df565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508560a081815250508473ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff16815250508360c081815250508163ffffffff166101008163ffffffff16815250508267ffffffffffffffff1660e08167ffffffffffffffff168152505080600481905550600060028111156200014157620001406200037b565b5b600560006101000a81548160ff021916908360028111156200016857620001676200037b565b5b0217905550505050505050620003aa565b600080fd5b6000819050919050565b62000193816200017e565b81146200019f57600080fd5b50565b600081519050620001b38162000188565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001e682620001b9565b9050919050565b620001f881620001d9565b81146200020457600080fd5b50565b6000815190506200021881620001ed565b92915050565b6000819050919050565b62000233816200021e565b81146200023f57600080fd5b50565b600081519050620002538162000228565b92915050565b600067ffffffffffffffff82169050919050565b620002788162000259565b81146200028457600080fd5b50565b60008151905062000298816200026d565b92915050565b600063ffffffff82169050919050565b620002b9816200029e565b8114620002c557600080fd5b50565b600081519050620002d981620002ae565b92915050565b60008060008060008060c08789031215620002ff57620002fe62000179565b5b60006200030f89828a01620001a2565b96505060206200032289828a0162000207565b95505060406200033589828a0162000242565b94505060606200034889828a0162000287565b93505060806200035b89828a01620002c8565b92505060a06200036e89828a01620001a2565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516113bd62000408600039600061044d015260006104da015260006104aa0152600061048901526000818161072c01526107520152600081816102f8015261034c01526113bd6000f3fe6080604052600436106100c25760003560e01c80636e04ff0d1161007f578063ca6a9ef811610059578063ca6a9ef814610259578063e55ae4e814610284578063e586a4f0146102c1578063ee38adaf146102ec576100c2565b80636e04ff0d146101c55780638638b0c614610203578063bd4d025c1461022e576100c2565b80631fe543e3146100c757806344e43c98146100f05780634585e33b1461011b578063473f1ddc1461014457806353a2c19a1461016f5780636b68c03c1461019a575b600080fd5b3480156100d357600080fd5b506100ee60048036038101906100e99190610cc3565b6102f6565b005b3480156100fc57600080fd5b506101056103b6565b6040516101129190610d2e565b60405180910390f35b34801561012757600080fd5b50610142600480360381019061013d9190610dfe565b6103c0565b005b34801561015057600080fd5b506101596105a3565b6040516101669190610e88565b60405180910390f35b34801561017b57600080fd5b506101846105cd565b6040516101919190610d2e565b60405180910390f35b3480156101a657600080fd5b506101af6105ec565b6040516101bc9190610f1a565b60405180910390f35b3480156101d157600080fd5b506101ec60048036038101906101e79190610dfe565b610603565b6040516101fa929190610fcf565b60405180910390f35b34801561020f57600080fd5b50610218610692565b6040516102259190611020565b60405180910390f35b34801561023a57600080fd5b506102436106b8565b6040516102509190610d2e565b60405180910390f35b34801561026557600080fd5b5061026e6106c5565b60405161027b9190610d2e565b60405180910390f35b34801561029057600080fd5b506102ab60048036038101906102a6919061103b565b6106e0565b6040516102b89190610e88565b60405180910390f35b3480156102cd57600080fd5b506102d6610728565b6040516102e39190610d2e565b60405180910390f35b6102f4610750565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161039f929190611068565b60405180910390fd5b6103b28282610852565b5050565b6000600454905090565b60006103da60405180602001604052806000815250610603565b509050806104495747600180549050600560009054906101000a900460ff16600281111561040b5761040a610ea3565b5b6040517f8faa7ebb00000000000000000000000000000000000000000000000000000000815260040161044093929190611091565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060008054906101000a900461ffff167f0000000000000000000000000000000000000000000000000000000000000000600060029054906101000a900463ffffffff166040518663ffffffff1660e01b815260040161052c959493929190611140565b6020604051808303816000875af115801561054b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056f91906111a8565b9050807fed81d7c6d243af55a11a80e2e1ff815881e816981f9a54d57713923bfd60966460405160405180910390a2505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060029054906101000a900463ffffffff1663ffffffff16905090565b6000600560009054906101000a900460ff16905090565b600060606000600560009054906101000a900460ff16600281111561062b5761062a610ea3565b5b6000600281111561063f5761063e610ea3565b5b1490506000600454600254426106559190611204565b119050600080600180549050119050600080471190508380156106755750825b801561067e5750805b80156106875750815b955050505050915091565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600180549050905090565b60008060009054906101000a900461ffff1661ffff16905090565b6000600182815481106106f6576106f5611238565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156107aa576040517f4e8ed22600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f8d2254bbacae52dfc22329894f8ea57bc566f2efc4f77401f2ee951982387d3560405160405180910390a2565b60006001805490508260008151811061086e5761086d611238565b5b60200260200101516108809190611296565b905060006001828154811061089857610897611238565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560006101000a81548160ff0219169083600281111561092c5761092b610ea3565b5b0217905550600067ffffffffffffffff81111561094c5761094b610b80565b5b60405190808252806020026020018201604052801561097a5781602001602082028036833780820191505090505b5060019080519060200190610990929190610a79565b504260048190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109be906112f8565b60006040518083038185875af1925050503d80600081146109fb576040519150601f19603f3d011682016040523d82523d6000602084013e610a00565b606091505b5050905080610a3b576040517fc902a01500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df82604051610a6a919061136c565b60405180910390a15050505050565b828054828255906000526020600020908101928215610af2579160200282015b82811115610af15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a99565b5b509050610aff9190610b03565b5090565b5b80821115610b1c576000816000905550600101610b04565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610b4781610b34565b8114610b5257600080fd5b50565b600081359050610b6481610b3e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610bb882610b6f565b810181811067ffffffffffffffff82111715610bd757610bd6610b80565b5b80604052505050565b6000610bea610b20565b9050610bf68282610baf565b919050565b600067ffffffffffffffff821115610c1657610c15610b80565b5b602082029050602081019050919050565b600080fd5b6000610c3f610c3a84610bfb565b610be0565b90508083825260208201905060208402830185811115610c6257610c61610c27565b5b835b81811015610c8b5780610c778882610b55565b845260208401935050602081019050610c64565b5050509392505050565b600082601f830112610caa57610ca9610b6a565b5b8135610cba848260208601610c2c565b91505092915050565b60008060408385031215610cda57610cd9610b2a565b5b6000610ce885828601610b55565b925050602083013567ffffffffffffffff811115610d0957610d08610b2f565b5b610d1585828601610c95565b9150509250929050565b610d2881610b34565b82525050565b6000602082019050610d436000830184610d1f565b92915050565b600080fd5b600067ffffffffffffffff821115610d6957610d68610b80565b5b610d7282610b6f565b9050602081019050919050565b82818337600083830152505050565b6000610da1610d9c84610d4e565b610be0565b905082815260208101848484011115610dbd57610dbc610d49565b5b610dc8848285610d7f565b509392505050565b600082601f830112610de557610de4610b6a565b5b8135610df5848260208601610d8e565b91505092915050565b600060208284031215610e1457610e13610b2a565b5b600082013567ffffffffffffffff811115610e3257610e31610b2f565b5b610e3e84828501610dd0565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e7282610e47565b9050919050565b610e8281610e67565b82525050565b6000602082019050610e9d6000830184610e79565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610ee357610ee2610ea3565b5b50565b6000819050610ef482610ed2565b919050565b6000610f0482610ee6565b9050919050565b610f1481610ef9565b82525050565b6000602082019050610f2f6000830184610f0b565b92915050565b60008115159050919050565b610f4a81610f35565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f8a578082015181840152602081019050610f6f565b60008484015250505050565b6000610fa182610f50565b610fab8185610f5b565b9350610fbb818560208601610f6c565b610fc481610b6f565b840191505092915050565b6000604082019050610fe46000830185610f41565b8181036020830152610ff68184610f96565b90509392505050565b600061100a82610e47565b9050919050565b61101a81610fff565b82525050565b60006020820190506110356000830184611011565b92915050565b60006020828403121561105157611050610b2a565b5b600061105f84828501610b55565b91505092915050565b600060408201905061107d6000830185610e79565b61108a6020830184610e79565b9392505050565b60006060820190506110a66000830186610d1f565b6110b36020830185610d1f565b6110c06040830184610d1f565b949350505050565b6000819050919050565b6110db816110c8565b82525050565b600067ffffffffffffffff82169050919050565b6110fe816110e1565b82525050565b600061ffff82169050919050565b61111b81611104565b82525050565b600063ffffffff82169050919050565b61113a81611121565b82525050565b600060a08201905061115560008301886110d2565b61116260208301876110f5565b61116f6040830186611112565b61117c6060830185611131565b6111896080830184611131565b9695505050505050565b6000815190506111a281610b3e565b92915050565b6000602082840312156111be576111bd610b2a565b5b60006111cc84828501611193565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061120f82610b34565b915061121a83610b34565b9250828203905081811115611232576112316111d5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112a182610b34565b91506112ac83610b34565b9250826112bc576112bb611267565b5b828206905092915050565b600081905092915050565b50565b60006112e26000836112c7565b91506112ed826112d2565b600082019050919050565b6000611303826112d5565b9150819050919050565b6000819050919050565b600061133261132d61132884610e47565b61130d565b610e47565b9050919050565b600061134482611317565b9050919050565b600061135682611339565b9050919050565b6113668161134b565b82525050565b6000602082019050611381600083018461135d565b9291505056fea26469706673582212201a3693c9f952bac5184356bb39da04fa84c09a8db52c5169f79cdac8426a7ae564736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80636e04ff0d1161007f578063ca6a9ef811610059578063ca6a9ef814610259578063e55ae4e814610284578063e586a4f0146102c1578063ee38adaf146102ec576100c2565b80636e04ff0d146101c55780638638b0c614610203578063bd4d025c1461022e576100c2565b80631fe543e3146100c757806344e43c98146100f05780634585e33b1461011b578063473f1ddc1461014457806353a2c19a1461016f5780636b68c03c1461019a575b600080fd5b3480156100d357600080fd5b506100ee60048036038101906100e99190610cc3565b6102f6565b005b3480156100fc57600080fd5b506101056103b6565b6040516101129190610d2e565b60405180910390f35b34801561012757600080fd5b50610142600480360381019061013d9190610dfe565b6103c0565b005b34801561015057600080fd5b506101596105a3565b6040516101669190610e88565b60405180910390f35b34801561017b57600080fd5b506101846105cd565b6040516101919190610d2e565b60405180910390f35b3480156101a657600080fd5b506101af6105ec565b6040516101bc9190610f1a565b60405180910390f35b3480156101d157600080fd5b506101ec60048036038101906101e79190610dfe565b610603565b6040516101fa929190610fcf565b60405180910390f35b34801561020f57600080fd5b50610218610692565b6040516102259190611020565b60405180910390f35b34801561023a57600080fd5b506102436106b8565b6040516102509190610d2e565b60405180910390f35b34801561026557600080fd5b5061026e6106c5565b60405161027b9190610d2e565b60405180910390f35b34801561029057600080fd5b506102ab60048036038101906102a6919061103b565b6106e0565b6040516102b89190610e88565b60405180910390f35b3480156102cd57600080fd5b506102d6610728565b6040516102e39190610d2e565b60405180910390f35b6102f4610750565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161039f929190611068565b60405180910390fd5b6103b28282610852565b5050565b6000600454905090565b60006103da60405180602001604052806000815250610603565b509050806104495747600180549050600560009054906101000a900460ff16600281111561040b5761040a610ea3565b5b6040517f8faa7ebb00000000000000000000000000000000000000000000000000000000815260040161044093929190611091565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060008054906101000a900461ffff167f0000000000000000000000000000000000000000000000000000000000000000600060029054906101000a900463ffffffff166040518663ffffffff1660e01b815260040161052c959493929190611140565b6020604051808303816000875af115801561054b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056f91906111a8565b9050807fed81d7c6d243af55a11a80e2e1ff815881e816981f9a54d57713923bfd60966460405160405180910390a2505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060029054906101000a900463ffffffff1663ffffffff16905090565b6000600560009054906101000a900460ff16905090565b600060606000600560009054906101000a900460ff16600281111561062b5761062a610ea3565b5b6000600281111561063f5761063e610ea3565b5b1490506000600454600254426106559190611204565b119050600080600180549050119050600080471190508380156106755750825b801561067e5750805b80156106875750815b955050505050915091565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600180549050905090565b60008060009054906101000a900461ffff1661ffff16905090565b6000600182815481106106f6576106f5611238565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156107aa576040517f4e8ed22600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f8d2254bbacae52dfc22329894f8ea57bc566f2efc4f77401f2ee951982387d3560405160405180910390a2565b60006001805490508260008151811061086e5761086d611238565b5b60200260200101516108809190611296565b905060006001828154811061089857610897611238565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560006101000a81548160ff0219169083600281111561092c5761092b610ea3565b5b0217905550600067ffffffffffffffff81111561094c5761094b610b80565b5b60405190808252806020026020018201604052801561097a5781602001602082028036833780820191505090505b5060019080519060200190610990929190610a79565b504260048190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109be906112f8565b60006040518083038185875af1925050503d80600081146109fb576040519150601f19603f3d011682016040523d82523d6000602084013e610a00565b606091505b5050905080610a3b576040517fc902a01500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df82604051610a6a919061136c565b60405180910390a15050505050565b828054828255906000526020600020908101928215610af2579160200282015b82811115610af15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a99565b5b509050610aff9190610b03565b5090565b5b80821115610b1c576000816000905550600101610b04565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610b4781610b34565b8114610b5257600080fd5b50565b600081359050610b6481610b3e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610bb882610b6f565b810181811067ffffffffffffffff82111715610bd757610bd6610b80565b5b80604052505050565b6000610bea610b20565b9050610bf68282610baf565b919050565b600067ffffffffffffffff821115610c1657610c15610b80565b5b602082029050602081019050919050565b600080fd5b6000610c3f610c3a84610bfb565b610be0565b90508083825260208201905060208402830185811115610c6257610c61610c27565b5b835b81811015610c8b5780610c778882610b55565b845260208401935050602081019050610c64565b5050509392505050565b600082601f830112610caa57610ca9610b6a565b5b8135610cba848260208601610c2c565b91505092915050565b60008060408385031215610cda57610cd9610b2a565b5b6000610ce885828601610b55565b925050602083013567ffffffffffffffff811115610d0957610d08610b2f565b5b610d1585828601610c95565b9150509250929050565b610d2881610b34565b82525050565b6000602082019050610d436000830184610d1f565b92915050565b600080fd5b600067ffffffffffffffff821115610d6957610d68610b80565b5b610d7282610b6f565b9050602081019050919050565b82818337600083830152505050565b6000610da1610d9c84610d4e565b610be0565b905082815260208101848484011115610dbd57610dbc610d49565b5b610dc8848285610d7f565b509392505050565b600082601f830112610de557610de4610b6a565b5b8135610df5848260208601610d8e565b91505092915050565b600060208284031215610e1457610e13610b2a565b5b600082013567ffffffffffffffff811115610e3257610e31610b2f565b5b610e3e84828501610dd0565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e7282610e47565b9050919050565b610e8281610e67565b82525050565b6000602082019050610e9d6000830184610e79565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610ee357610ee2610ea3565b5b50565b6000819050610ef482610ed2565b919050565b6000610f0482610ee6565b9050919050565b610f1481610ef9565b82525050565b6000602082019050610f2f6000830184610f0b565b92915050565b60008115159050919050565b610f4a81610f35565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f8a578082015181840152602081019050610f6f565b60008484015250505050565b6000610fa182610f50565b610fab8185610f5b565b9350610fbb818560208601610f6c565b610fc481610b6f565b840191505092915050565b6000604082019050610fe46000830185610f41565b8181036020830152610ff68184610f96565b90509392505050565b600061100a82610e47565b9050919050565b61101a81610fff565b82525050565b60006020820190506110356000830184611011565b92915050565b60006020828403121561105157611050610b2a565b5b600061105f84828501610b55565b91505092915050565b600060408201905061107d6000830185610e79565b61108a6020830184610e79565b9392505050565b60006060820190506110a66000830186610d1f565b6110b36020830185610d1f565b6110c06040830184610d1f565b949350505050565b6000819050919050565b6110db816110c8565b82525050565b600067ffffffffffffffff82169050919050565b6110fe816110e1565b82525050565b600061ffff82169050919050565b61111b81611104565b82525050565b600063ffffffff82169050919050565b61113a81611121565b82525050565b600060a08201905061115560008301886110d2565b61116260208301876110f5565b61116f6040830186611112565b61117c6060830185611131565b6111896080830184611131565b9695505050505050565b6000815190506111a281610b3e565b92915050565b6000602082840312156111be576111bd610b2a565b5b60006111cc84828501611193565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061120f82610b34565b915061121a83610b34565b9250828203905081811115611232576112316111d5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112a182610b34565b91506112ac83610b34565b9250826112bc576112bb611267565b5b828206905092915050565b600081905092915050565b50565b60006112e26000836112c7565b91506112ed826112d2565b600082019050919050565b6000611303826112d5565b9150819050919050565b6000819050919050565b600061133261132d61132884610e47565b61130d565b610e47565b9050919050565b600061134482611317565b9050919050565b600061135682611339565b9050919050565b6113668161134b565b82525050565b6000602082019050611381600083018461135d565b9291505056fea26469706673582212201a3693c9f952bac5184356bb39da04fa84c09a8db52c5169f79cdac8426a7ae564736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1482,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "requestConfirmations",
        "offset": 0,
        "slot": "0",
        "type": "t_uint16"
      },
      {
        "astId": 1487,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "NUM_Words",
        "offset": 2,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 1490,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1495,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1497,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 1499,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_setInterval",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1506,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "stateLottery",
        "offset": 0,
        "slot": "5",
        "type": "t_enum(LotteryState)1503"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)1503": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}